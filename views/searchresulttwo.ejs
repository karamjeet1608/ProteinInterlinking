<!DOCTYPE html>
<html lang="en">
<head>
    <title>Proteins Interlinking</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/formss.css">
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <style>                                                                
        .tooltip {                                                       
            background: #eee;
            box-shadow: 0 0 5px #999999;
            color: #333;                                                   
            visibility: hidden;
            font-size: 14px;
            left: 130px;
            padding: 10px;
            position: absolute;
            text-align: left;
            top: 95px;
            width: 148px;
            z-index: 10;
            opacity: 10;                                                 
        }                                                               
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-sm bg-dark navbar-dark" >
        <div class="container">
            <a class="navbar-brand" href="/api/protein/mainpage">Proteins Interlinking</a>
            <!-- Links -->
            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Add
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="/api/protein/addpage">Protein</a>
                        <a class="dropdown-item" href="/api/protein/addproteininterlinking">Protein Interlinking</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" href="/api/protein/searchpage">Search</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" href="/api/protein/interactomepage">Interlinking</a>
                </li>
            </ul>
        </div>
    </nav>
    <div>
        <h2 class="text-center my-2">Search Result</h2>
    </div>
    <div class="container border border-dark">
        <svg width="500" height="586"></svg>
    </div>  
        <script >
                var width = window.innerWidth*0.80
                var height = window.innerHeight
                var nodes =[]
                var links =[]
                var svg = d3.select('svg')
                svg.attr('width', width).attr('height', height)
            
                d3.json('http://localhost:3600/api/protein/getsearchvaluetworelation',function(error, data){
                console.log(data)
                nodes =data["nodes"];
                links =data["links"];
            
                var tooltip = d3.select("body")
                .append('div')                                               
                .attr('class', 'tooltip'); 
            
                tooltip.append('div')                                           
                    .attr('class', 'fusion');                                      
                         
                tooltip.append('div')                                           
                    .attr('class', 'combinedscore');                                      
                tooltip.append('div')                                           
                    .attr('class', 'database');
                
                tooltip.append('div')                                           
                    .attr('class', 'cooccurence');                                      
                         
                tooltip.append('div')                                           
                    .attr('class', 'experimental');                                      
            
                tooltip.append('div')                                           
                    .attr('class', 'neighborhood');
                
                tooltip.append('div')                                           
                    .attr('class', 'coexpression');                                      
                         
                tooltip.append('div')                                           
                    .attr('class', 'textmining');                                      
            
                // simulation setup with all forces
                const linkForce = d3
                .forceLink()
                .id(link => link.protein)
                .strength(.01)
            
                // simulation setup with all forces for nodes
                var simulation = d3
                .forceSimulation()
                .force('link', linkForce)
                .force('charge', d3.forceManyBody().strength(-50))
                .force('center', d3.forceCenter(width/2, height/2))
            
            
                function getNodeColor(node) {
                return '#' + (Math.random().toString(16) + "000000").substring(2,8)
                }
            
                function radiusval(){
                var randomnumber=Math.floor((Math.random() * 10) + 1)
                return randomnumber
                }
            
                var nodeElements = svg.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodes)
                .enter().append("circle")
                .attr("r", 15)
                .attr("fill", getNodeColor)
            
                var textElements = svg.append("g")
                .attr("class", "texts")
                .selectAll("text")
                .data(nodes)
                .enter().append("text")
                .text(function (nodes) { return  nodes.protein.substring(5) })
                .attr("font-size", 10)
                .attr("dx", 15)
                .attr("dy", 4)

            
                const linkElements = svg.append('g')
                .selectAll('line')
                .data(links)
                .enter().append('line')
                .attr('stroke-width', 2)
                .attr('stroke', getNodeColor)
                .on("mouseover", function(links) { 
                    tooltip.select('.combinedscore').html("Combinedscore: " +links.relationshipdetails.combinedscore);
                    tooltip.select('.database').html("Database: " +links.relationshipdetails.database);
                    tooltip.select('.experimental').html("Experimental: " +links.relationshipdetails.experimental);
                    tooltip.select('.coexpression').html("Co-expression: " +links.relationshipdetails.coexpression);
                    tooltip.select('.textmining').html("Textmining: " +links.relationshipdetails.textmining);
                   return tooltip.style('visibility', 'visible');
                 })
                .on("mousemove", function(){ tooltip.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
                .on("mouseout", function(){ return tooltip.style('visibility', 'hidden') });
            
                simulation.nodes(nodes).on('tick', () => {
                nodeElements
                .attr('cx', function (node) { return node.x })
                .attr('cy', function (node) { return node.y })
                textElements
                .attr('x', function (node) { return node.x })
                .attr('y', function (node) { return node.y })
                linkElements
                .attr('x1', link => link.source.x)
                .attr('y1', link => link.source.y)
                .attr('x2', link => link.target.x)
                .attr('y2', link => link.target.y)
                })
                simulation.force('link').links(links)
                })
        </script>
    </body>
</html>





