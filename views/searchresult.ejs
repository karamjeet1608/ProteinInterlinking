<!DOCTYPE html>
<html lang="en">

<head>
    <title>Proteins Interlinking</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/formss.css">
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <!--  <script src="../public/js/saveSvgAsPng.js"></script>
    <link rel="stylesheet" href="../public/css/tooltip.css"> -->
    <style>
        .tooltip {
            background: #eee;
            box-shadow: 0 0 5px #999999;
            color: #333;
            visibility: hidden;
            font-size: 14px;
            left: 130px;
            padding: 10px;
            position: absolute;
            text-align: left;
            top: 95px;
            width: 148px;
            z-index: 10;
            opacity: 10;
        }
    </style>
    <script>
        (function () {
            const out$ = typeof exports != 'undefined' && exports || typeof define != 'undefined' && {} || this || window;
            if (typeof define !== 'undefined') define('save-svg-as-png', [], () => out$);
            out$.default = out$;

            const xmlNs = 'http://www.w3.org/2000/xmlns/';
            const xhtmlNs = 'http://www.w3.org/1999/xhtml';
            const svgNs = 'http://www.w3.org/2000/svg';
            const doctype = '<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" [<!ENTITY nbsp "&#160;">]>';
            const urlRegex = /url\(["']?(.+?)["']?\)/;
            const fontFormats = {
                woff2: 'font/woff2',
                woff: 'font/woff',
                otf: 'application/x-font-opentype',
                ttf: 'application/x-font-ttf',
                eot: 'application/vnd.ms-fontobject',
                sfnt: 'application/font-sfnt',
                svg: 'image/svg+xml'
            };

            const isElement = obj => obj instanceof HTMLElement || obj instanceof SVGElement;
            const requireDomNode = el => {
                if (!isElement(el)) throw new Error(`an HTMLElement or SVGElement is required; got ${el}`);
            };
            const requireDomNodePromise = el =>
                new Promise((resolve, reject) => {
                    if (isElement(el)) resolve(el)
                    else reject(new Error(`an HTMLElement or SVGElement is required; got ${el}`));
                })
            const isExternal = url => url && url.lastIndexOf('http', 0) === 0 && url.lastIndexOf(window.location.host) === -1;

            const getFontMimeTypeFromUrl = fontUrl => {
                const formats = Object.keys(fontFormats)
                    .filter(extension => fontUrl.indexOf(`.${extension}`) > 0)
                    .map(extension => fontFormats[extension]);
                if (formats) return formats[0];
                console.error(`Unknown font format for ${fontUrl}. Fonts may not be working correctly.`);
                return 'application/octet-stream';
            };

            const arrayBufferToBase64 = buffer => {
                let binary = '';
                const bytes = new Uint8Array(buffer);
                for (let i = 0; i < bytes.byteLength; i++) binary += String.fromCharCode(bytes[i]);
                return window.btoa(binary);
            }

            const getDimension = (el, clone, dim) => {
                const v =
                    (el.viewBox && el.viewBox.baseVal && el.viewBox.baseVal[dim]) ||
                    (clone.getAttribute(dim) !== null && !clone.getAttribute(dim).match(/%$/) && parseInt(clone.getAttribute(dim))) ||
                    el.getBoundingClientRect()[dim] ||
                    parseInt(clone.style[dim]) ||
                    parseInt(window.getComputedStyle(el).getPropertyValue(dim));
                return typeof v === 'undefined' || v === null || isNaN(parseFloat(v)) ? 0 : v;
            };

            const getDimensions = (el, clone, width, height) => {
                if (el.tagName === 'svg') return {
                    width: width || getDimension(el, clone, 'width'),
                    height: height || getDimension(el, clone, 'height')
                };
                else if (el.getBBox) {
                    const { x, y, width, height } = el.getBBox();
                    return {
                        width: x + width,
                        height: y + height
                    };
                }
            };

            const reEncode = data =>
                decodeURIComponent(
                    encodeURIComponent(data)
                        .replace(/%([0-9A-F]{2})/g, (match, p1) => {
                            const c = String.fromCharCode(`0x${p1}`);
                            return c === '%' ? '%25' : c;
                        })
                );

            const uriToBlob = uri => {
                const byteString = window.atob(uri.split(',')[1]);
                const mimeString = uri.split(',')[0].split(':')[1].split(';')[0]
                const buffer = new ArrayBuffer(byteString.length);
                const intArray = new Uint8Array(buffer);
                for (let i = 0; i < byteString.length; i++) {
                    intArray[i] = byteString.charCodeAt(i);
                }
                return new Blob([buffer], { type: mimeString });
            };

            const query = (el, selector) => {
                if (!selector) return;
                try {
                    return el.querySelector(selector) || el.parentNode && el.parentNode.querySelector(selector);
                } catch (err) {
                    console.warn(`Invalid CSS selector "${selector}"`, err);
                }
            };

            const detectCssFont = (rule, href) => {
                // Match CSS font-face rules to external links.
                // @font-face {
                //   src: local('Abel'), url(https://fonts.gstatic.com/s/abel/v6/UzN-iejR1VoXU2Oc-7LsbvesZW2xOQ-xsNqO47m55DA.woff2);
                // }
                const match = rule.cssText.match(urlRegex);
                const url = (match && match[1]) || '';
                if (!url || url.match(/^data:/) || url === 'about:blank') return;
                const fullUrl =
                    url.startsWith('../') ? `${href}/../${url}`
                        : url.startsWith('./') ? `${href}/.${url}`
                            : url;
                return {
                    text: rule.cssText,
                    format: getFontMimeTypeFromUrl(fullUrl),
                    url: fullUrl
                };
            };

            const inlineImages = el => Promise.all(
                Array.from(el.querySelectorAll('image')).map(image => {
                    let href = image.getAttributeNS('http://www.w3.org/1999/xlink', 'href') || image.getAttribute('href');
                    if (!href) return Promise.resolve(null);
                    if (isExternal(href)) {
                        href += (href.indexOf('?') === -1 ? '?' : '&') + 't=' + new Date().valueOf();
                    }
                    return new Promise((resolve, reject) => {
                        const canvas = document.createElement('canvas');
                        const img = new Image();
                        img.crossOrigin = 'anonymous';
                        img.src = href;
                        img.onerror = () => reject(new Error(`Could not load ${href}`));
                        img.onload = () => {
                            canvas.width = img.width;
                            canvas.height = img.height;
                            canvas.getContext('2d').drawImage(img, 0, 0);
                            image.setAttributeNS('http://www.w3.org/1999/xlink', 'href', canvas.toDataURL('image/png'));
                            resolve(true);
                        };
                    });
                })
            );

            const cachedFonts = {};
            const inlineFonts = fonts => Promise.all(
                fonts.map(font =>
                    new Promise((resolve, reject) => {
                        if (cachedFonts[font.url]) return resolve(cachedFonts[font.url]);

                        const req = new XMLHttpRequest();
                        req.addEventListener('load', () => {
                            // TODO: it may also be worth it to wait until fonts are fully loaded before
                            // attempting to rasterize them. (e.g. use https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet)
                            const fontInBase64 = arrayBufferToBase64(req.response);
                            const fontUri = font.text.replace(urlRegex, `url("data:${font.format};base64,${fontInBase64}")`) + '\n';
                            cachedFonts[font.url] = fontUri;
                            resolve(fontUri);
                        });
                        req.addEventListener('error', e => {
                            console.warn(`Failed to load font from: ${font.url}`, e);
                            cachedFonts[font.url] = null;
                            resolve(null);
                        });
                        req.addEventListener('abort', e => {
                            console.warn(`Aborted loading font from: ${font.url}`, e);
                            resolve(null);
                        });
                        req.open('GET', font.url);
                        req.responseType = 'arraybuffer';
                        req.send();
                    })
                )
            ).then(fontCss => fontCss.filter(x => x).join(''));

            let cachedRules = null;
            const styleSheetRules = () => {
                if (cachedRules) return cachedRules;
                return cachedRules = Array.from(document.styleSheets).map(sheet => {
                    try {
                        return { rules: sheet.cssRules, href: sheet.href };
                    } catch (e) {
                        console.warn(`Stylesheet could not be loaded: ${sheet.href}`, e);
                        return {};
                    }
                });
            };

            const inlineCss = (el, options) => {
                const {
                    selectorRemap,
                    modifyStyle,
                    modifyCss,
                    fonts,
                    excludeUnusedCss
                } = options || {};
                const generateCss = modifyCss || ((selector, properties) => {
                    const sel = selectorRemap ? selectorRemap(selector) : selector;
                    const props = modifyStyle ? modifyStyle(properties) : properties;
                    return `${sel}{${props}}\n`;
                });
                const css = [];
                const detectFonts = typeof fonts === 'undefined';
                const fontList = fonts || [];
                styleSheetRules().forEach(({ rules, href }) => {
                    if (!rules) return;
                    Array.from(rules).forEach(rule => {
                        if (typeof rule.style != 'undefined') {
                            if (query(el, rule.selectorText)) css.push(generateCss(rule.selectorText, rule.style.cssText));
                            else if (detectFonts && rule.cssText.match(/^@font-face/)) {
                                const font = detectCssFont(rule, href);
                                if (font) fontList.push(font);
                            } else if (!excludeUnusedCss) {
                                css.push(rule.cssText);
                            }
                        }
                    });
                });

                return inlineFonts(fontList).then(fontCss => css.join('\n') + fontCss);
            };

            const downloadOptions = () => {
                if (!navigator.msSaveOrOpenBlob && !('download' in document.createElement('a'))) {
                    return { popup: window.open() };
                }
            };

            out$.prepareSvg = (el, options, done) => {
                requireDomNode(el);
                const {
                    left = 0,
                    top = 0,
                    width: w,
                    height: h,
                    scale = 1,
                    responsive = false,
                    excludeCss = false,
                } = options || {};

                return inlineImages(el).then(() => {
                    let clone = el.cloneNode(true);
                    clone.style.backgroundColor = (options || {}).backgroundColor || el.style.backgroundColor;
                    const { width, height } = getDimensions(el, clone, w, h);

                    if (el.tagName !== 'svg') {
                        if (el.getBBox) {
                            if (clone.getAttribute('transform') != null) {
                                clone.setAttribute('transform', clone.getAttribute('transform').replace(/translate\(.*?\)/, ''));
                            }
                            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                            svg.appendChild(clone);
                            clone = svg;
                        } else {
                            console.error('Attempted to render non-SVG element', el);
                            return;
                        }
                    }

                    clone.setAttribute('version', '1.1');
                    clone.setAttribute('viewBox', [left, top, width, height].join(' '));
                    if (!clone.getAttribute('xmlns')) clone.setAttributeNS(xmlNs, 'xmlns', svgNs);
                    if (!clone.getAttribute('xmlns:xlink')) clone.setAttributeNS(xmlNs, 'xmlns:xlink', 'http://www.w3.org/1999/xlink');

                    if (responsive) {
                        clone.removeAttribute('width');
                        clone.removeAttribute('height');
                        clone.setAttribute('preserveAspectRatio', 'xMinYMin meet');
                    } else {
                        clone.setAttribute('width', width * scale);
                        clone.setAttribute('height', height * scale);
                    }

                    Array.from(clone.querySelectorAll('foreignObject > *')).forEach(foreignObject => {
                        foreignObject.setAttributeNS(xmlNs, 'xmlns', foreignObject.tagName === 'svg' ? svgNs : xhtmlNs);
                    });

                    if (excludeCss) {
                        const outer = document.createElement('div');
                        outer.appendChild(clone);
                        const src = outer.innerHTML;
                        if (typeof done === 'function') done(src, width, height);
                        else return { src, width, height };
                    } else {
                        return inlineCss(el, options).then(css => {
                            const style = document.createElement('style');
                            style.setAttribute('type', 'text/css');
                            style.innerHTML = `<![CDATA[\n${css}\n]]>`;

                            const defs = document.createElement('defs');
                            defs.appendChild(style);
                            clone.insertBefore(defs, clone.firstChild);

                            const outer = document.createElement('div');
                            outer.appendChild(clone);
                            const src = outer.innerHTML.replace(/NS\d+:href/gi, 'xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href');

                            if (typeof done === 'function') done(src, width, height);
                            else return { src, width, height };
                        });
                    }
                });
            };

            out$.svgAsDataUri = (el, options, done) => {
                requireDomNode(el);
                return out$.prepareSvg(el, options)
                    .then(({ src, width, height }) => {
                        const svgXml = `data:image/svg+xml;base64,${window.btoa(reEncode(doctype + src))}`;
                        if (typeof done === 'function') {
                            done(svgXml, width, height);
                        }
                        return svgXml;
                    });
            };

            out$.svgAsPngUri = (el, options, done) => {
                requireDomNode(el);
                const {
                    encoderType = 'image/png',
                    encoderOptions = 0.8,
                    canvg
                } = options || {};

                const convertToPng = ({ src, width, height }) => {
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    const pixelRatio = window.devicePixelRatio || 1;

                    canvas.width = width * pixelRatio;
                    canvas.height = height * pixelRatio;
                    canvas.style.width = `${canvas.width}px`;
                    canvas.style.height = `${canvas.height}px`;
                    context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);

                    if (canvg) canvg(canvas, src);
                    else context.drawImage(src, 0, 0);

                    let png;
                    try {
                        png = canvas.toDataURL(encoderType, encoderOptions);
                    } catch (e) {
                        if ((typeof SecurityError !== 'undefined' && e instanceof SecurityError) || e.name === 'SecurityError') {
                            console.error('Rendered SVG images cannot be downloaded in this browser.');
                            return;
                        } else throw e;
                    }
                    if (typeof done === 'function') done(png, canvas.width, canvas.height);
                    return Promise.resolve(png);
                }

                if (canvg) return out$.prepareSvg(el, options).then(convertToPng);
                else return out$.svgAsDataUri(el, options).then(uri => {
                    return new Promise((resolve, reject) => {
                        const image = new Image();
                        image.onload = () => resolve(convertToPng({
                            src: image,
                            width: image.width,
                            height: image.height
                        }));
                        image.onerror = () => {
                            reject(`There was an error loading the data URI as an image on the following SVG\n${window.atob(uri.slice(26))}Open the following link to see browser's diagnosis\n${uri}`);
                        }
                        image.src = uri;
                    })
                });
            };

            out$.download = (name, uri, options) => {
                if (navigator.msSaveOrOpenBlob) navigator.msSaveOrOpenBlob(uriToBlob(uri), name);
                else {
                    const saveLink = document.createElement('a');
                    if ('download' in saveLink) {
                        saveLink.download = name;
                        saveLink.style.display = 'none';
                        document.body.appendChild(saveLink);
                        try {
                            const blob = uriToBlob(uri);
                            const url = URL.createObjectURL(blob);
                            saveLink.href = url;
                            saveLink.onclick = () => requestAnimationFrame(() => URL.revokeObjectURL(url));
                        } catch (e) {
                            console.error(e);
                            console.warn('Error while getting object URL. Falling back to string URL.');
                            saveLink.href = uri;
                        }
                        saveLink.click();
                        document.body.removeChild(saveLink);
                    } else if (options && options.popup) {
                        options.popup.document.title = name;
                        options.popup.location.replace(uri);
                    }
                }
            };

            out$.saveSvg = (el, name, options) => {
                const downloadOpts = downloadOptions(); // don't inline, can't be async
                return requireDomNodePromise(el)
                    .then(el => out$.svgAsDataUri(el, options || {}))
                    .then(uri => out$.download(name, uri, downloadOpts));
            };

            out$.saveSvgAsPng = (el, name, options) => {
                const downloadOpts = downloadOptions(); // don't inline, can't be async
                return requireDomNodePromise(el)
                    .then(el => out$.svgAsPngUri(el, options || {}))
                    .then(uri => out$.download(name, uri, downloadOpts));
            };
        })();

        function myfunction() {
            // Get the d3js SVG element and save using saveSvgAsPng.js
            saveSvgAsPng(document.getElementsByTagName("svg")[0], "plot.png", {
                scale: 2,
                backgroundColor: "#FFFFFF"
            });
        }


    </script>
</head>

<body>
    <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="/api/protein/mainpage">Proteins Interlinking</a>
            <!-- Links -->
            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Add
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="/api/protein/addpage">Protein</a>
                        <a class="dropdown-item" href="/api/protein/addproteininterlinking">Protein Interlinking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/api/protein/searchpage">Search</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/api/protein/interactomepage">Interlinking</a>
                </li>
            </ul>
        </div>
    </nav>
    <div>
        <h2 class="text-center my-2">Search Result</h2>
    </div>
    <div class="container">
        <div class="row ">
            <div class="col-md-2">
                <button style="float: right;" id="saveButton" onclick="myfunction()" type="button"
                    class="btn btn-primary">Download</button>
            </div>
            <div class="col-md-2">
                <button style="float: right;" id="viewsubstrate" type="button" class="btn btn-primary">View
                    Substrate</button>
            </div>
            <div class="col-md-2">
                <button style="float:left;" id="viewkinase" type="button" class="btn btn-primary">View Kinase</button>
            </div>
        </div>
    </div>
    <div>
        <svg></svg>
    </div>
    <script>
        var width = window.innerWidth * 0.80
        var height = window.innerHeight
        var nodes = []
        var links = []
        var svg = d3.select('svg')
        svg.attr('width', width).attr('height', height)

        d3.json('http://localhost:3800/api/protein/getsearchvalue', function (error, data) {
            console.log(data)
            nodes = data["nodes"];
            links = data["links"];

            var tooltip = d3.select("body")
                .append('div')
                .attr('class', 'tooltip');

            tooltip.append('div')
                .attr('class', 'fusion');

            tooltip.append('div')
                .attr('class', 'combinedscore');

            tooltip.append('div')
                .attr('class', 'database');

            tooltip.append('div')
                .attr('class', 'cooccurence');

            tooltip.append('div')
                .attr('class', 'experimental');

            tooltip.append('div')
                .attr('class', 'neighborhood');

            tooltip.append('div')
                .attr('class', 'coexpression');

            tooltip.append('div')
                .attr('class', 'textmining');

            // simulation setup with all forces
            const linkForce = d3
                .forceLink()
                .id(link => link.protein)
                .strength(.01)

            // simulation setup with all forces for nodes
            var simulation = d3
                .forceSimulation()
                .force('link', linkForce)
                .force('charge', d3.forceManyBody().strength(-50))
                .force('center', d3.forceCenter(width / 2, height / 2))


            function getNodeColor(node) {
                return '#' + (Math.random().toString(16) + "000000").substring(2, 8)
            }

            function radiusval() {
                var randomnumber = Math.floor((Math.random() * 10) + 1)
                return randomnumber
            }

            var nodeElements = svg.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodes)
                .enter().append("circle")
                .attr("r", 15)
                .attr("fill", getNodeColor)

            var textElements = svg.append("g")
                .attr("class", "texts")
                .selectAll("text")
                .data(nodes)
                .enter().append("text")
                .text(function (nodes) { return nodes.protein })
                .attr("font-size", 10)
                .attr("dx", 15)
                .attr("dy", 4)

            var textEnsembleName = svg.append("g")
                .attr("class", "texts")
                .selectAll("text")
                .data(nodes)
                .enter().append("text")
                .text(function (nodes) { return nodes.EnsembleName })
                .attr("font-size", 15)
                .attr("dx", 15)
                .attr("dy", 4)


            const linkElements = svg.append('g')
                .selectAll('line')
                .data(links)
                .enter().append('line')
                .attr('stroke-width', 2)
                .attr('stroke', getNodeColor)
                .on("mouseover", function (links) {
                    tooltip.select('.combinedscore').html("Combinedscore: " + links.relationshipdetails.combinedscore);
                    tooltip.select('.database').html("Database: " + links.relationshipdetails.database);
                    tooltip.select('.experimental').html("Experimental: " + links.relationshipdetails.experimental);
                    tooltip.select('.coexpression').html("Co-expression: " + links.relationshipdetails.coexpression);
                    tooltip.select('.textmining').html("Textmining: " + links.relationshipdetails.textmining);
                    return tooltip.style('visibility', 'visible');
                })
                .on("mousemove", function () { tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function () { return tooltip.style('visibility', 'hidden') });

            simulation.nodes(nodes).on('tick', () => {
                nodeElements
                    .attr('cx', function (node) { return node.x })
                    .attr('cy', function (node) { return node.y })
                textElements
                    .attr('x', function (node) { return node.x })
                    .attr('y', function (node) { return node.y })
                textEnsembleName
                    .attr('x', function (node) { return node.x })
                    .attr('y', function (node) { return node.y })
                linkElements
                    .attr('x1', link => link.source.x)
                    .attr('y1', link => link.source.y)
                    .attr('x2', link => link.target.x)
                    .attr('y2', link => link.target.y)
            })
            simulation.force('link').links(links)
        })
    </script>
</body>

</html>